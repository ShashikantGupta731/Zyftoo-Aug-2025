{
    "sourceFile": "backend/src/controllers/pageController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753126463759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753162069690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const PageConfig = require('../models/PageConfig');\r\n const Category = require('../models/Category');\r\n+const Subcategory = require('../models/Subcategory');\r\n \r\n // Initialize default page configuration if not exists\r\n const initializePageConfig = async (pageId) => {\r\n   let pageConfig = await PageConfig.findById(pageId);\r\n@@ -294,4 +295,182 @@\n       error: 'Failed to update page configuration' \r\n     });\r\n   }\r\n };\r\n+\r\n+// Get categories for homepage display (filtered and ordered)\r\n+exports.getHomePageCategories = async (req, res) => {\r\n+  try {\r\n+    // Get page configuration for home\r\n+    const pageConfig = await PageConfig.findById('home');\r\n+    \r\n+    if (!pageConfig) {\r\n+      return res.status(404).json({ \r\n+        success: false,\r\n+        error: 'Home page configuration not found' \r\n+      });\r\n+    }\r\n+    \r\n+    // Find category section\r\n+    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n+    \r\n+    if (!categorySection || !categorySection.enabled) {\r\n+      return res.json({\r\n+        success: true,\r\n+        data: {\r\n+          enabled: false,\r\n+          categories: [],\r\n+          config: {}\r\n+        }\r\n+      });\r\n+    }\r\n+    \r\n+    // Get configured categories\r\n+    const configuredCategories = categorySection.config.categories || [];\r\n+    const maxCategories = categorySection.config.maxCategories || 6;\r\n+    \r\n+    // Filter enabled categories and respect order\r\n+    const enabledCategories = configuredCategories\r\n+      .filter(cat => cat.enabled)\r\n+      .sort((a, b) => a.order - b.order)\r\n+      .slice(0, maxCategories);\r\n+    \r\n+    // Fetch actual category data\r\n+    const categoryIds = enabledCategories.map(cat => cat.categoryId);\r\n+    const categories = await Category.find({ \r\n+      _id: { $in: categoryIds },\r\n+      status: true \r\n+    }).select('name image description');\r\n+    \r\n+    // Fetch subcategories for these categories\r\n+    const subcategories = await Subcategory.find({ \r\n+      parent: { $in: categoryIds },\r\n+      status: true \r\n+    }).select('name parent image');\r\n+    \r\n+    // Group subcategories by parent category\r\n+    const subcategoriesMap = subcategories.reduce((acc, sub) => {\r\n+      if (!acc[sub.parent]) acc[sub.parent] = [];\r\n+      acc[sub.parent].push({\r\n+        name: sub.name,\r\n+        image: sub.image?.url\r\n+      });\r\n+      return acc;\r\n+    }, {});\r\n+    \r\n+    // Map to maintain order from configuration\r\n+    const orderedCategories = enabledCategories.map(configCat => {\r\n+      const category = categories.find(cat => cat._id.toString() === configCat.categoryId);\r\n+      if (!category) return null;\r\n+      \r\n+      return {\r\n+        id: category._id,\r\n+        name: category.name,\r\n+        icon: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n+        image: category.image?.url || '/assets/img/product/category/default-category.svg',\r\n+        description: category.description || '',\r\n+        order: configCat.order,\r\n+        subcategories: subcategoriesMap[category._id] || []\r\n+      };\r\n+    }).filter(Boolean);\r\n+    \r\n+    res.json({\r\n+      success: true,\r\n+      data: {\r\n+        enabled: categorySection.enabled,\r\n+        categories: orderedCategories,\r\n+        config: {\r\n+          maxCategories: categorySection.config.maxCategories || 6,\r\n+          layout: categorySection.config.layout || 'grid',\r\n+          showSubcategories: categorySection.config.showSubcategories ?? true\r\n+        }\r\n+      }\r\n+    });\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error fetching home page categories:', error);\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to fetch categories' \r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Update category section configuration\r\n+exports.updateCategorySection = async (req, res) => {\r\n+  try {\r\n+    const { enabled, maxCategories, categories, layout, showSubcategories } = req.body;\r\n+    \r\n+    let pageConfig = await PageConfig.findById('home');\r\n+    if (!pageConfig) {\r\n+      // Create default config if not exists\r\n+      pageConfig = await initializePageConfig('home');\r\n+    }\r\n+    \r\n+    // Find category section\r\n+    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === 'categorySection');\r\n+    \r\n+    if (sectionIndex === -1) {\r\n+      // Add category section if not exists\r\n+      pageConfig.sections.push({\r\n+        sectionType: 'categorySection',\r\n+        enabled: enabled ?? true,\r\n+        order: 1,\r\n+        config: {\r\n+          maxCategories: maxCategories || 6,\r\n+          categories: categories || [],\r\n+          layout: layout || 'grid',\r\n+          showSubcategories: showSubcategories ?? true\r\n+        }\r\n+      });\r\n+    } else {\r\n+      // Update existing section\r\n+      pageConfig.sections[sectionIndex].enabled = enabled ?? pageConfig.sections[sectionIndex].enabled;\r\n+      pageConfig.sections[sectionIndex].config = {\r\n+        ...pageConfig.sections[sectionIndex].config,\r\n+        maxCategories: maxCategories ?? pageConfig.sections[sectionIndex].config.maxCategories,\r\n+        categories: categories ?? pageConfig.sections[sectionIndex].config.categories,\r\n+        layout: layout ?? pageConfig.sections[sectionIndex].config.layout,\r\n+        showSubcategories: showSubcategories ?? pageConfig.sections[sectionIndex].config.showSubcategories\r\n+      };\r\n+    }\r\n+    \r\n+    pageConfig.lastModified = new Date();\r\n+    await pageConfig.save();\r\n+    \r\n+    res.json({\r\n+      success: true,\r\n+      message: 'Category section updated successfully',\r\n+      data: pageConfig.sections[sectionIndex]\r\n+    });\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error updating category section:', error);\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to update category section' \r\n+    });\r\n+  }\r\n+};\r\n+\r\n+// Add refresh endpoint for real-time updates\r\n+exports.refreshPageSection = async (req, res) => {\r\n+  try {\r\n+    const { pageId, sectionType } = req.params;\r\n+    \r\n+    // You can use WebSocket or Server-Sent Events here\r\n+    // For now, just return a timestamp for polling\r\n+    res.json({\r\n+      success: true,\r\n+      data: {\r\n+        lastUpdate: new Date().toISOString(),\r\n+        pageId,\r\n+        sectionType\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    res.status(500).json({ \r\n+      success: false,\r\n+      error: 'Failed to refresh section' \r\n+    });\r\n+  }\r\n+};\r\n"
                }
            ],
            "date": 1753126463759,
            "name": "Commit-0",
            "content": "const PageConfig = require('../models/PageConfig');\r\nconst Category = require('../models/Category');\r\n\r\n// Initialize default page configuration if not exists\r\nconst initializePageConfig = async (pageId) => {\r\n  let pageConfig = await PageConfig.findById(pageId);\r\n  \r\n  if (!pageConfig) {\r\n    // Create default configuration for home page\r\n    const defaultConfig = {\r\n      _id: pageId,\r\n      name: pageId === 'home' ? 'Home Page' : 'Corporate Page',\r\n      slug: pageId === 'home' ? '/' : '/corporate',\r\n      sections: [\r\n        {\r\n          sectionType: 'categorySection',\r\n          enabled: true,\r\n          order: 1,\r\n          config: {\r\n            maxCategories: 6,\r\n            categoryIds: [], // Array of selected category IDs\r\n            showSubcategories: true,\r\n            layout: 'grid'\r\n          }\r\n        },\r\n        {\r\n          sectionType: 'sliderSection',\r\n          enabled: true,\r\n          order: 2,\r\n          config: {\r\n            autoplay: true,\r\n            duration: 5000,\r\n            slides: []\r\n          }\r\n        },\r\n        {\r\n          sectionType: 'productSection',\r\n          enabled: true,\r\n          order: 3,\r\n          config: {\r\n            title: 'Featured Products',\r\n            maxProducts: 8,\r\n            category: null\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    \r\n    pageConfig = new PageConfig(defaultConfig);\r\n    await pageConfig.save();\r\n  }\r\n  \r\n  return pageConfig;\r\n};\r\n\r\n// Get page configuration\r\nexports.getPageConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    const pageConfig = await initializePageConfig(pageKey);\r\n    \r\n    // For each category section, populate with actual categories\r\n    for (let section of pageConfig.sections) {\r\n      if (section.sectionType === 'categorySection') {\r\n        const categories = await Category.find({ status: true })\r\n          .select('name image description')\r\n          .lean();\r\n        section.config.availableCategories = categories;\r\n      }\r\n    }\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: pageConfig\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching page config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch page configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Get specific section configuration\r\nexports.getSectionConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    \r\n    const pageConfig = await initializePageConfig(pageKey);\r\n    const section = pageConfig.sections.find(s => s.sectionType === `${sectionKey}Section`);\r\n    \r\n    if (!section) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Section not found'\r\n      });\r\n    }\r\n\r\n    // For category section, also fetch actual categories\r\n    if (sectionKey === 'category' || sectionKey === 'giftCategories') {\r\n      const categories = await Category.find({ status: true })\r\n        .select('name image description')\r\n        .lean();\r\n      section.config.availableCategories = categories;\r\n    }\r\n\r\n    res.json({\r\n      success: true,\r\n      data: section\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching section config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch section configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Update section configuration\r\nexports.updateSectionConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey, sectionKey } = req.params;\r\n    const updateData = req.body;\r\n    \r\n    let pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      pageConfig = await initializePageConfig(pageKey);\r\n    }\r\n    \r\n    // Find and update the specific section\r\n    const sectionIndex = pageConfig.sections.findIndex(s => s.sectionType === `${sectionKey}Section`);\r\n    \r\n    if (sectionIndex === -1) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Section not found' \r\n      });\r\n    }\r\n    \r\n    // Update the section configuration\r\n    pageConfig.sections[sectionIndex] = {\r\n      ...pageConfig.sections[sectionIndex].toObject(),\r\n      ...updateData,\r\n      sectionType: `${sectionKey}Section` // Ensure sectionType doesn't change\r\n    };\r\n\r\n    pageConfig.lastModified = new Date();\r\n    await pageConfig.save();\r\n\r\n    console.log(`Updated ${pageKey}.${sectionKey}:`, updateData);\r\n    \r\n    res.json({ \r\n      success: true, \r\n      message: 'Section updated successfully',\r\n      data: pageConfig.sections[sectionIndex]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating section config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to update section configuration' \r\n    });\r\n  }\r\n};\r\n\r\n// Get categories for frontend display (filtered by page configuration)\r\nexports.getCategoriesForDisplay = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    \r\n    // Get page configuration\r\n    const pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      return res.status(404).json({ \r\n        success: false,\r\n        error: 'Page configuration not found' \r\n      });\r\n    }\r\n    \r\n    // Find category section\r\n    const categorySection = pageConfig.sections.find(s => s.sectionType === 'categorySection');\r\n    if (!categorySection || !categorySection.enabled) {\r\n      return res.json({\r\n        success: true,\r\n        data: {\r\n          enabled: false,\r\n          categories: []\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Get categories based on configuration\r\n    let query = { status: true };\r\n    if (categorySection.config.categoryIds && categorySection.config.categoryIds.length > 0) {\r\n      query._id = { $in: categorySection.config.categoryIds };\r\n    }\r\n    \r\n    let categories = await Category.find(query)\r\n      .select('name image description')\r\n      .lean();\r\n    \r\n    // Apply maxCategories limit\r\n    if (categorySection.config.maxCategories && categorySection.config.maxCategories > 0) {\r\n      categories = categories.slice(0, categorySection.config.maxCategories);\r\n    }\r\n    \r\n    // Transform for frontend\r\n    const transformedCategories = categories.map(cat => ({\r\n      id: cat._id,\r\n      name: cat.name,\r\n      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      icon: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      description: cat.description || '',\r\n      enabled: true\r\n    }));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        enabled: categorySection.enabled,\r\n        categories: transformedCategories,\r\n        config: categorySection.config\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching categories for display:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch categories' \r\n    });\r\n  }\r\n};\r\n\r\n// Get all categories (for admin selection)\r\nexports.getAllCategories = async (req, res) => {\r\n  try {\r\n    const categories = await Category.find({ status: true })\r\n      .select('name image description')\r\n      .sort({ name: 1 })\r\n      .lean();\r\n    \r\n    const transformedCategories = categories.map(cat => ({\r\n      id: cat._id,\r\n      value: cat._id,\r\n      label: cat.name,\r\n      name: cat.name,\r\n      image: cat.image?.url || '/assets/img/product/category/default-category.svg',\r\n      description: cat.description || ''\r\n    }));\r\n    \r\n    res.json({\r\n      success: true,\r\n      data: transformedCategories\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching all categories:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to fetch categories' \r\n    });\r\n  }\r\n};\r\n\r\n// Update entire page configuration\r\nexports.updatePageConfig = async (req, res) => {\r\n  try {\r\n    const { pageKey } = req.params;\r\n    const { sections } = req.body;\r\n    \r\n    let pageConfig = await PageConfig.findById(pageKey);\r\n    if (!pageConfig) {\r\n      pageConfig = await initializePageConfig(pageKey);\r\n    }\r\n    \r\n    // Update sections\r\n    if (sections) {\r\n      pageConfig.sections = sections;\r\n    }\r\n    \r\n    pageConfig.lastModified = new Date();\r\n    await pageConfig.save();\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Page configuration updated successfully',\r\n      data: pageConfig\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating page config:', error);\r\n    res.status(500).json({ \r\n      success: false,\r\n      error: 'Failed to update page configuration' \r\n    });\r\n  }\r\n};\r\n"
        }
    ]
}